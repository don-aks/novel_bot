from typing import Any, Dict, List, Optional, Union
from time import sleep

from vkbottle import Bot, Message, Proxy
from vkbottle.keyboard import Keyboard, keyboard_gen

from main import Novel
import config


class BotOutput:
    """
        –ö–ª–∞—Å—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è
        –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –∏–≥—Ä–æ–∫–æ–º.
        –ó–¥–µ—Å—å –≤—Å—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞.
        –ú–µ—Ç–æ–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç —Å–ª–æ–≤–∞—Ä—å —Å
        –Ω–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º —é–∑–µ—Ä—É.
    """

    def __init__(self):
        self.players = {}
        self.novels = []
        # test novel
        self.novels.append({
            "name": "–ó–æ–º–±–∏-–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å –Ω–∞ –∫–æ—Ä–∞–±–ª–µ",
            "descr": "–í—ã –ø—Ä–æ—Å—ã–ø–∞–µ—Ç–µ—Å—å –Ω–∞ –∫–æ—Ä–∞–±–ª–µ –∏ –≤–¥—Ä—É–≥...",
            "genre": "–ó–æ–º–±–∏",
            "storyline": config.example_storyline,
            "author_id": 248015237,
            "url": "test",
            "img": "photo-29559271_456242468",
            "is_public": True,
            "is_hentai": False,
            "is_input_username": True,
            "typing_delay": 0.3
        })

    def on_message(
        self,
        message: Message
    ) -> Dict[str, Union[str, Keyboard, None]]:
        """
            –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥.
            –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message –∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–≥–æ –≤—ã–∑—ã–≤–∞–µ—Ç
            –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.
            :return: —Å–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç–æ–¥–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        player = self.__get_player_info(message.from_id)

        # Analyse message
        if message.payload:
            # –£–¥–∞–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏,
            # —Ç–∞–∫ –∫–∞–∫ payload –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–ª—å–∫–æ json.
            message.payload = message.payload.replace('"', '')

            # –ï—Å–ª–∏ payload —ç—Ç–æ –≤—ã–∑–æ–≤ —Å–µ–∫—Ü–∏–∏
            if message.payload in ('game', 'menu', 'editor', 'settings'):
                if player['section'] == 'game':
                    self.__remove_player_game_flags(player)
                player['section'] = message.payload
        elif message.text in ('!game', '!menu', '!editor', '!settings'):
            if player['section'] == 'game':
                self.__remove_player_game_flags(player)
            player['section'] = message.text.replace('!', '')

        # Call methods
        if player['section'] == 'game':
            return self.__game_step(message, player)
        elif player['section'] == 'menu':
            return self.__show_menu(message, player)
        elif player['section'] == 'editor':
            return self.__novel_editor(message, player)
        elif player['section'] == 'settings':
            return self.__show_settings(message, player)

    def __get_player_info(
        self,
        vk_id: int
    ) -> Dict[str, Union[str, Keyboard, None]]:
        """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–æ–∫–µ
            –≤ —Å–ª–æ–≤–∞—Ä–µ self.players.
            –ï—Å–ª–∏ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ—Ç –µ–≥–æ.

            :param vk_id: id –≤ vk –∏–≥—Ä–æ–∫–∞
            :return: –ø–æ–¥—Å–ª–æ–≤–∞—Ä—å player
                     –∏–∑ —Å–ª–æ–≤–∞—Ä—è self.players
        """
        if vk_id in self.players:
            return self.players[vk_id]
        else:
            player = self.players[vk_id] = {
                "section": "menu",  # str
                "storyline_in_editor": None,  # list
                "own_novels_id": None,  # int
                "game_novel_id": None,  # int
                "game_slide_id": 0,     # int
                "game_vars": None,      # dict

                # Params not for BD
                "game_obj": None,  # Novel
                "game_is_choice": False,  # bool
                "game_is_input_username": False  # bool
            }
            return player

    def __show_menu(
        self,
        message: Message,
        player: Dict[str, Any]
    ) -> Dict[str, Union[str, Keyboard, None]]:
        """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–µ–Ω—é.
            :param message: Message
            :param player: element self.players
            :return: output message
        """
        return {
                "text": "–ú–µ–Ω—é.\n" +
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É " +
                "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                "!game - –ò–≥—Ä–∞—Ç—å.\n" +
                "!editor - –†–µ–¥–∞–∫—Ç–æ—Ä –Ω–æ–≤–µ–ª–ª.\n" +
                "!settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏.",

                "keyboard": keyboard_gen([
                    [{
                        "text": "üéÆ –ò–≥—Ä–∞—Ç—å!",
                        "color": "positive",
                        "payload": '"game"'
                    }],
                    [
                        {
                            "text": "‚úè –†–µ–¥–∞–∫—Ç–æ—Ä",
                            "color": "negative",
                            "payload": '"editor"'
                        },
                        {
                            "text": "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                            "color": "secondary",
                            "payload": '"settings"'
                        }
                    ]
                ])
        }

    def __game_step(
        self,
        message: Message,
        player: Dict[str, Any]
    ) -> Dict[str, Union[str, Keyboard, None]]:
        """
            –®–∞–≥ –≤–ø–µ—Ä–µ–¥ –≤ –Ω–æ–≤–µ–ª–ª–µ –¥–ª—è
            –∏–≥—Ä–æ–∫–∞ player.
            :param message: Message
            :param player: element self.players
            :return: output message
        """
        player = self.__get_player_info(message.from_id)
        # –ù–µ –≤—ã–±—Ä–∞–Ω–∞ –Ω–æ–≤–µ–ª–ª–∞
        if player['game_novel_id'] is None:
            # –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥.
            player['game_novel_id'] = 0

        novel_dict = self.novels[player['game_novel_id']]

        # –ù–µ —Å–æ–∑–¥–∞–Ω –æ–±—ä–µ–∫—Ç –Ω–æ–≤–µ–ª–ª—ã
        if player['game_obj'] is None:
            player['game_obj'] = Novel(
                novel_dict['storyline'],
                player['game_slide_id'],
                novel_dict['is_input_username']
            )

            novel = player['game_obj']

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ –æ–±—ä–µ–∫—Ç
            if isinstance(player['game_vars'], dict):
                for key, value in player['game_vars'].items():
                    if key == 'choice':
                        player['game_obj'].player_choices = value
                    elif key == 'username':
                        player['game_obj'].username = value
                    else:
                        player['game_obj'].vars[key] = value

        novel = player['game_obj']

        if novel.slide_id == 0 and novel.is_input_username:
            if player['game_is_input_username']:
                novel.username = message.text
            else:
                player['game_is_input_username'] = True
                return {
                    "text": "–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è:",
                    "keyboard": keyboard_gen([])
                }

        if player['game_is_choice']:
            if message.payload is not None:
                choice = int(message.payload) - 1
            else:
                # –ü—Ä–æ–≤–µ—Ä—è—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ
                # —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã–±–æ—Ä–æ–º.
                try:
                    choice = int(message.text)
                except ValueError:
                    return {
                        "text": "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!"
                    }
                else:
                    len_choice = len(novel.storyline[novel.slide_id]['choice'])
                    if not len_choice >= choice > 0:
                        return {
                            "text": f"–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ {len_choice}" +
                            "–∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É!"
                        }

                choice -= 1

            step = novel.step(choice)
            player['game_is_choice'] = False
        else:
            if message.payload == 'restart' or message.text == "!restart":
                novel.slide_id = 0
            step = novel.step()

        if step:
            attachment = step.get('attachment')
            # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±–æ—Ä
            if 'choice' in step:
                answer = step['text']+'\n'
                for i, option in enumerate(step['choice']):
                    answer += f"\n{i+1}. {option}"

                player['game_is_choice'] = True
                return {
                    "text": answer,
                    "keyboard": self.__generate_choice_keyboard(step['choice']),
                    "attachment": attachment,
                    "typing_delay": novel_dict['typing_delay']
                }

            else:
                # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∞—Ç—Ç–∞—á–∏
                return {
                    "text": step['text'],
                    "keyboard": keyboard_gen(
                        [[
                            {'text': "–î–∞–ª—å—à–µ ‚û°", "color": "primary"}
                        ]]
                    ),
                    "attachment": attachment,
                    "typing_delay": novel_dict['typing_delay']
                }

        else:
            return {
                        "text": "–ù–æ–≤–µ–ª–ª–∞ –∑–∞–∫–æ–Ω—á–µ–Ω–∞.\n" +
                        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É " +
                        "–∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n" +
                        "!restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–µ–ª–ª—É.\n" +
                        "!menu - –í—ã—Ö–æ–¥ –≤ –º–µ–Ω—é.",

                        "keyboard": keyboard_gen(
                            [
                                [{
                                    "text": "–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",
                                    "payload": '"restart"',
                                    "color": "positive"
                                }],
                                [{
                                    "text": "–í –º–µ–Ω—é",
                                    "payload": '"menu"',
                                    "color": "negative"
                                }]
                            ]
                        )
                    }

    def __novel_editor(
        self,
        message: Message,
        player: Dict[str, Any]
    ) -> Dict[str, Union[str, Keyboard, None]]:
        if player['storyline_in_editor'] is None:
            player['storyline_in_editor'] = []
            return {
                "text": "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–æ–≤."
            }

    def __show_settings(
        self,
        message: Message,
        player: Dict[str, Any]
    ) -> Dict[str, Union[str, Keyboard, None]]:
        return {
            "text": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏.",
            "keyboard": keyboard_gen(
                [[{
                    "text": "–ú–µ–Ω—é",
                    "color": "positive",
                    "payload": '"menu"'
                }]]
            )
        }

    def __generate_choice_keyboard(
        self,
        array: List[str],
        color: str = "secondary"
    ) -> Union[Keyboard, bool]:
        """
            –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            –∏–∑ –º–∞—Å—Å–∏–≤–∞ –≤—ã–±–æ—Ä–æ–≤ array.

            –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ 5 –∏–ª–∏ –º–µ–Ω—å—à–µ - –æ—Ç–≤–æ–¥–∏—Ç
            –∫–∞–∂–¥–æ–º—É –ø–æ 1 —Å—Ç—Ä–æ–∫–µ.
            –ï—Å–ª–∏ –±–æ–ª—å—à–µ, –æ—Ç–≤–æ–¥–∏—Ç –º–∞–∫—Å. 2 —ç–ª–µ–º–µ–Ω—Ç–∞
            –Ω–∞ —Å—Ç—Ä–æ–∫—É.
            –î–ª–∏–Ω–Ω–∞ –º–∞—Å—Å–∏–≤–∞ –Ω–µ –±–æ–ª—å—à–µ 10.

            :param array: –º–∞—Å—Å–∏–≤ —Å –≤—ã–±–æ—Ä–æ–º
            :param color: —Ü–≤–µ—Ç –∫–Ω–æ–ø–æ–∫
            :return:  Keyboard
                      –∏–ª–∏ False –µ—Å–ª–∏ len(array) > 10
        """
        if len(array) <= 5:
            # [1, 2, 3, 4, 5] => [[1], [2], [3], [4], [5]]

            return keyboard_gen([
                [{"text": text, "payload": str(i+1), "color": color}]
                for i, text in enumerate(array)]
            )
        elif len(array) <= 10:
            # [1, 2, 3, 4, 5, 6, 7] => [[1, 2], [3, 4], [5, 6], [7]]

            if len(array) % 2 != 0:  # –Ω–µ—á–µ—Ç–Ω–æ–µ
                # –î–æ–±–∞–≤–ª—è–µ–º, —á—Ç–æ–±—ã –º–∞—Å—Å–∏–≤ –¥–µ–ª–∏–ª—Å—è –Ω–∞ 2
                array.append(None)

            return keyboard_gen(
                [
                    [
                        {"text": text, "payload": str(i+1), "color": color},
                        {"text": array[2*i+1], "payload": str(2*i+2), "color": color}
                    ]
                    # –ï—Å–ª–∏ —Å–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ –≤—ã—à–µ,
                    # –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫.
                    if array[2*i+1] is not None

                    else [
                        {"text": text, "payload": str(i+1), "color": color}
                    ]
                    for i, text in enumerate(array[::2])
                ]
            )
        else:
            return False

    def __remove_player_game_flags(self, player: Dict[str, Any]) -> None:
        """
            –ü–µ—Ä–µ–≤–æ–¥–∏—Ç —Ñ–ª–∞–≥–∏ –∏–≥—Ä–æ–∫–∞ player:
            game_is_choice,
            game_is_input_username
            –≤ –ø–æ–ª–æ–∂–µ–Ω–∏–µ False.

            –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á—Ç–æ–±—ã –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
            –≤ –∏–≥—Ä—É —Ç–µ–±–µ –ø–æ–∫–∞–∑–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            —Å –≤—ã–±–æ—Ä–æ–º –∏ –≤–≤–æ–¥–æ–º –∏–º–µ–Ω–∏ –∑–∞–Ω–æ–≤–æ.
        """
        player['game_is_choice'] = False
        player['game_is_input_username'] = False


proxy = Proxy(address="http://165.22.64.68:43377")
vk_bot = Bot(config.token)

bot_out = BotOutput()


@vk_bot.on.message()
async def on_message(message: Message) -> None:
    """
        –ö–æ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        –≤—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ on_message –∫–ª–∞—Å—Å–∞ BotOutput
        –∏ –æ—Ç—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á—Ç–æ –ø–æ–ª—É—á–∏–ª.
    """

    ans = bot_out.on_message(message)

    # –≠—Ñ—Ñ–µ–∫—Ç –ø–µ—á–∞—Ç–∞–Ω—å—è —Å–æ–æ–±—â–µ–Ω–∏—è.
    if ans.get('typing_delay'):
        await message.api.request(
            'messages.markAsRead',
            {'peer_id': message.from_id}
        )

        await message.api.request(
            'messages.setActivity',
            {
                'type': 'typing',
                'user_id': message.from_id
            }
        )
        sleep(ans['typing_delay'])

    await message(
        ans.get('text'),
        ans.get('attachment'),
        keyboard=ans.get('keyboard')
    )

if __name__ == '__main__':
    vk_bot.run_polling()
